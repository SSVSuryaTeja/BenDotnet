Application Architectures 

What is .NET

Why .NET

Components of .NET

Namespaces and Assemblies

Compiling and Execution procedure of .NET Application 

_____________________________________________________________________________

There are 3 types of application architectures known as

	(i) Single Tier

       (ii) Two-tier

      (iii) Three-Tier

Each application architecture contains 3 layers known as

	a) User Services

	b) Business Services

	c) Data Services 

*** In single tier architecture, one single executable file handles all these 
operations, so single tier architecture applications are called monolythic
applications *** 

In two-tier architecture, we can implement applications on

1) Client : {User Services + Business Services} + {Data Services} 

2) Server : {User Services} + {Business Services + Data Services} 

*** These two-layers will be resided in a single system or different system ***

In three-tier architecture all these 3 layers resides separately in a single system or different system and performs the job as a single unit. 

What is .NET

Why .NET 

Microsoft introduced .NET for bridging the gap between interoperability between the application. It is a foundation on which, where we can register, develop and deploy the applications. 

.NET framework contains more than 250+ language characterstics have been formed as a single unit where we can use one language features within another language. 

what is problem in vb is dllhell

Namespaces and assemblies : 

Namespaces : Contains group of related classes and interfaces that which belongs to one common group, If you want to overcome the naming conflicts between classes, then we need the help of namespaces. 

Assemblies : Contains group of namespaces, that which contains publickeytoken, version and cultureinfo, Once you make an assembly and deploy in GAC (Global Assembly Cache) folder. c:\windows\assembly You can use in all .NET framework applications.

An assembly contains group of namespaces, and a single namespace can be shared by multiple assemblies. 

Components of .NET

CLR (Common Language at Runtime) 

Responsible for 

	-> Debugging

	-> Exception Handling 

	-> Security 

	-> Version Support 

Managed Code and Unmanaged Code : 

The code that which targets CLR known as Managed Code,
The code that which does not targets CLR (c++, C etc) known as unmanaged code. 


MSIL (Microsoft intermediate Language) 

     Once you compile any .NET application, instead of converting that into
CPU specific code, first it converts into MSIL. 
Then it becomes language neutral, means you can access in any .NET framework
language (no compilation issues) 

CTS (Common Type System) 

	All .NET framework languages needs to undergone one common state
w.r.t. Data Types and ranges. Ex : If integer in C# takes 4 bytes, then vb.net 
integer also needs to take 4 bytes and asp.net integer also needs to take 4 bytes. 

CLS (Common Language Specification) 

	The code which is there in one .NET framework language can be used in 
another .NET framework language known as language interoperability. 

BCL and FCL

Base Class Libraries 

Framework Class Libraries 

Compiling and Execution procedure of .NET application : '
________________________________________________________

1) When you compile any .NET application, at first instead of converting 
that into CPU specific code, first it converts into MSIL. 

    Either exe or dll file will be created. 

2) Then it would be sent to class loader. 

	There are 2 types of class loaders known as

	(i) Primordial Class Loader : Used to load all system classes which
		are required to run the program. 

       (ii) Class Loader Objects : Used to load all custom classes that which
		are required to run the program. 

3) In class loader, we have JIT compiler, converts MSIL into CPU specific 
format. 

4) Then it would be sent to execution manager. 

5) Which contains QUEUE of programs ready to execute, where we can execute
the program. 

*** Before execution it needs to undergone the security authentication ***

___________________________________________________________________________________________


Object Oriented Programming : It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, 
which are to be used as templates for creating copies of such modules on demand. 

Object : An object is a real world entity, that which possess 3 characterstics 
known as 


	(i) State

       (ii) Behaviour

      (iii) Identity 

OOPs features : 
________________

	1) Encapsulation : Wrapping up of data and functions into a single unit
			known as encapsulation. 

	2) Abstraction : Hiding the irrelevant details of an object, that do not
		contribute to its essential characaterstics known as abstraction.

	*** Encapsulation focuses on showing the relevant details, where 
		abstraction focuses on hiding the irrelevant details ***

	3) Inheritance : Deriving a new entity from already existing entity known as inheriance, through inheritance we can reduce the size of the program. 

	4) Polymorphism : The ability to take more than one form known as 
			polymorphism. 


class : A class is a template or blueprint, that which contains combination 
of data members and member functions. Members of the class can be accessable 
by using the instance of the class. 

class class_name
{
   data members;
   member functions;
}

Access Modifiers :
___________________

	1) private : Allows you to access members within the class. 

	2) public : Allows you to access members in entire application.

	3) protected : Allows you to access members within current/derived class.

	4) internal : Allows you to access members in all classes of current namespace.

	5) protected internal : Allows you to access members in all classes 
		of current namespace and other namespace derived classes. 

Data Types : 
_____________

There are 2 types of data types as

	1) value types : int, float, double, char, boolean 

	2) reference types : string, object and custom type. 

*** Value types will be stored in STACK memory, and reference types will be stored
in HEAP memory ***

Console.WriteLine() : used to display any value or message. 

Console.WriteLine("Welcome to C# Programming...");

int 




































