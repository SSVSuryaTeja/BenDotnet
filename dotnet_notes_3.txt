Object Oriented Programming : 
________________________________

It is an approach that provides a way of modularizing programming, that
which can be used to create small partition memory area for both data 
and objects which are to be used as templates for creating copies of such
modules on demand. 

Object : 

  An object is a real world entity, that which possess 3 characterstics
known as 

	(i) State

       (ii) Behaviour

      (iii) Identity 

OOPs features : 
________________

	1) Encapsulation : Wrapping up of data and functions into a single unit
		known as encapsulation. 

	2) Abstraction : Hiding the irrelevant details of an object, that do not
		contribute to its essential characterstics known as Abstraction.

		*** Encapsulation focuses on showing the relevant details,
			where abstraction focuses on hiding the irrelevant 
		details ***

	3) Inheritance : Deriving a new entity from already existing entity 
			known as inheritance, through inheritance we can reduce
			the size of the program. 

	4) Polymorphism : The ability to take more than one form known as polymorphism. 

class : A class is a template or blueprint, that which contains combination of 
data members and member functions. Members of the class can be accessable 
by using the instance of the class. 

class class_name
{
   data members;
   member functions;
}

Access Modifiers : 
____________________

	1) private : Allows you to access members within current class. 

	2) public : Allows you to access members in entire application. 

	3) protected : Allows you to access members within current/derived class.

	4) internal : Allows you to access members in all classes of current
			namespace. 

	5) protected internal : Allows you to access members within all classes
		of current namespace, and other namespace derived classes. 

Data Types : 
_____________

	There are 2 types of data types as 

	1) value types : int, float, double, char, boolean etc...

	2) reference types : string, object and custom classes 

*** value types will be stored in STACK memory, and reference types will  be
stored in HEAP memory ***


Console.WriteLine() : Used to display any value or message. 

Console.WriteLine("Welcome to Dotnet Programming...");

int a;
double b;
string name;

Console.WriteLine("A value is {0} B value is {1} Name is {2}",a,b,name);

Console.ReadLine() : Used to read data from the keyboard. 

a=Convert.ToInt32(Console.ReadLine());
b=Convert.ToDouble(Console.ReadLine());

You can create an object to the class as 

class_name obj=new class_name();

Control Structures : 
_____________________

Used to define the flow of the program. 

There are 2 types of control structures known as 

	1) Branching 

if...else : Executes the statements based on the condition. 

	if(condition) {
	   statement(s);
	} else {
	   statement(s);
	}

	2) Looping 

Array : An array is the finite ordered set of homogeneous elements, means all
the elements belongs to same data type. 

int[] a=new int[]{12,5,66,34};

a[0]=12;
a[1]=5;
a[2]=66;
a[3]=34;

int[] a = new int[] { 12, 6, 88, 335, 76 };
foreach(int i in a)
{
   Console.WriteLine(i);
}

In foreach loop above, at first i points to the first element in array a,
after processing first element, it checks next element is there or not 
by using HasMoreElements(), if it returns true, then it moves to the next element
by using NextElement(), it repeats as soon as HasMoreElements() returns false. 

There are 2 types of memories as 

1) STACK

2) HEAP 

value types will be stored in STACK memory, and reference types will be stored
in HEAP memory. 

Types of Parameters :
_______________________

There are 3 types of parameters as 

	1) in : used for input purpose.

	2) ref : used for both input/output purpose.

	3) out : Used to return more than one value. 


void show(int x)
{
...
...
}

show();
show(12);
show(12,55);
show(12,6,77);

Method Overloading : The concept of using the same method name w.r.t. 
different parameters or different data types known as method overloading. 

Here, the method name must be same, but no.of parameters or type of parameters
we are passing here are different. 






















 




















